// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ELData.proto
// Protobuf C++ Version: 4.26.0-dev

#include "ELData.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr ELData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : sensorid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sensorvalue_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ELData::ELData(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ELDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ELDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ELDataDefaultTypeInternal() {}
  union {
    ELData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ELDataDefaultTypeInternal _ELData_default_instance_;
static ::_pb::Metadata file_level_metadata_ELData_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_ELData_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_ELData_2eproto = nullptr;
const ::uint32_t
    TableStruct_ELData_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::ELData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::ELData, _impl_.sensorid_),
        PROTOBUF_FIELD_OFFSET(::ELData, _impl_.sensorvalue_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::ELData)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_ELData_default_instance_._instance,
};
const char descriptor_table_protodef_ELData_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\014ELData.proto\"/\n\006ELData\022\020\n\010sensorId\030\001 \001"
    "(\t\022\023\n\013sensorValue\030\002 \001(\002b\006proto3"
};
static ::absl::once_flag descriptor_table_ELData_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ELData_2eproto = {
    false,
    false,
    71,
    descriptor_table_protodef_ELData_2eproto,
    "ELData.proto",
    &descriptor_table_ELData_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_ELData_2eproto::offsets,
    file_level_metadata_ELData_2eproto,
    file_level_enum_descriptors_ELData_2eproto,
    file_level_service_descriptors_ELData_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ELData_2eproto_getter() {
  return &descriptor_table_ELData_2eproto;
}
// ===================================================================

class ELData::_Internal {
 public:
};

ELData::ELData(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ELData)
}
inline PROTOBUF_NDEBUG_INLINE ELData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : sensorid_(arena, from.sensorid_),
        _cached_size_{0} {}

ELData::ELData(
    ::google::protobuf::Arena* arena,
    const ELData& from)
    : ::google::protobuf::Message(arena) {
  ELData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.sensorvalue_ = from._impl_.sensorvalue_;

  // @@protoc_insertion_point(copy_constructor:ELData)
}
inline PROTOBUF_NDEBUG_INLINE ELData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : sensorid_(arena),
        _cached_size_{0} {}

inline void ELData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.sensorvalue_ = {};
}
ELData::~ELData() {
  // @@protoc_insertion_point(destructor:ELData)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ELData::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.sensorid_.Destroy();
  _impl_.~Impl_();
}

const ::google::protobuf::MessageLite::ClassData*
ELData::GetClassData() const {
  PROTOBUF_CONSTINIT static const ::google::protobuf::MessageLite::
      ClassDataFull _data_ = {
          {
              nullptr,  // OnDemandRegisterArenaDtor
              PROTOBUF_FIELD_OFFSET(ELData, _impl_._cached_size_),
              false,
          },
          &ELData::MergeImpl,
          &ELData::kDescriptorMethods,
      };
  return &_data_;
}
PROTOBUF_NOINLINE void ELData::Clear() {
// @@protoc_insertion_point(message_clear_start:ELData)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sensorid_.ClearToEmpty();
  _impl_.sensorvalue_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ELData::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 23, 2> ELData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ELData_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::ELData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float sensorValue = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(ELData, _impl_.sensorvalue_)}},
    // string sensorId = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ELData, _impl_.sensorid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string sensorId = 1;
    {PROTOBUF_FIELD_OFFSET(ELData, _impl_.sensorid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float sensorValue = 2;
    {PROTOBUF_FIELD_OFFSET(ELData, _impl_.sensorvalue_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\6\10\0\0\0\0\0\0"
    "ELData"
    "sensorId"
  }},
};

::uint8_t* ELData::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ELData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string sensorId = 1;
  if (!this->_internal_sensorid().empty()) {
    const std::string& _s = this->_internal_sensorid();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ELData.sensorId");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float sensorValue = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sensorvalue = this->_internal_sensorvalue();
  ::uint32_t raw_sensorvalue;
  memcpy(&raw_sensorvalue, &tmp_sensorvalue, sizeof(tmp_sensorvalue));
  if (raw_sensorvalue != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_sensorvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ELData)
  return target;
}

::size_t ELData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ELData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sensorId = 1;
  if (!this->_internal_sensorid().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_sensorid());
  }

  // float sensorValue = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sensorvalue = this->_internal_sensorvalue();
  ::uint32_t raw_sensorvalue;
  memcpy(&raw_sensorvalue, &tmp_sensorvalue, sizeof(tmp_sensorvalue));
  if (raw_sensorvalue != 0) {
    total_size += 5;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}


void ELData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ELData*>(&to_msg);
  auto& from = static_cast<const ELData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ELData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sensorid().empty()) {
    _this->_internal_set_sensorid(from._internal_sensorid());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_sensorvalue = from._internal_sensorvalue();
  ::uint32_t raw_sensorvalue;
  memcpy(&raw_sensorvalue, &tmp_sensorvalue, sizeof(tmp_sensorvalue));
  if (raw_sensorvalue != 0) {
    _this->_impl_.sensorvalue_ = from._impl_.sensorvalue_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ELData::CopyFrom(const ELData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ELData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ELData::IsInitialized() const {
  return true;
}

void ELData::InternalSwap(ELData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sensorid_, &other->_impl_.sensorid_, arena);
        swap(_impl_.sensorvalue_, other->_impl_.sensorvalue_);
}

::google::protobuf::Metadata ELData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(&descriptor_table_ELData_2eproto_getter,
                                   &descriptor_table_ELData_2eproto_once,
                                   file_level_metadata_ELData_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::std::false_type _static_init_ PROTOBUF_UNUSED =
    (::_pbi::AddDescriptors(&descriptor_table_ELData_2eproto),
     ::std::false_type{});
#include "google/protobuf/port_undef.inc"
