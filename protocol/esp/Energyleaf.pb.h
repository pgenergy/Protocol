/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_ENERGYLEAF_PB_H_INCLUDED
#define PB_ENERGYLEAF_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _SensorType {
    SensorType_ANALOG_ELECTRICITY = 0,
    SensorType_DIGITAL_ELECTRICITY = 1,
    SensorType_GAS = 2,
    SensorType_WATER = 3
} SensorType;

/* Struct definitions */
typedef struct _TokenRequest {
    char client_id[128];
    SensorType type;
    bool has_need_script;
    bool need_script;
} TokenRequest;

typedef struct _TokenResponse {
    bool has_access_token;
    char access_token[45];
    bool has_expires_in;
    uint32_t expires_in; /* in seconds (look documentation for correct value) */
    uint32_t status; /* In range of 200-299 correct, else bad */
    bool has_status_message;
    char status_message[255];
    bool has_script;
    char script[255];
    bool has_analog_rotation_per_kwh;
    uint32_t analog_rotation_per_kwh;
} TokenResponse;

typedef struct _SensorDataRequest {
    char access_token[45];
    SensorType type;
    float value;
} SensorDataRequest;

typedef struct _SensorDataResponse {
    uint32_t status; /* In range of 200-299 correct, else bad */
    bool has_status_message;
    char status_message[255];
} SensorDataResponse;

typedef struct _ScriptAcceptedRequest {
    char access_token[45];
} ScriptAcceptedRequest;

typedef struct _ScriptAcceptedResponse {
    uint32_t status;
    bool has_status_message;
    char status_message[255];
} ScriptAcceptedResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _SensorType_MIN SensorType_ANALOG_ELECTRICITY
#define _SensorType_MAX SensorType_WATER
#define _SensorType_ARRAYSIZE ((SensorType)(SensorType_WATER+1))

#define TokenRequest_type_ENUMTYPE SensorType


#define SensorDataRequest_type_ENUMTYPE SensorType





/* Initializer values for message structs */
#define TokenRequest_init_default                {"", _SensorType_MIN, false, 0}
#define TokenResponse_init_default               {false, "", false, 0, 0, false, "", false, "", false, 0}
#define SensorDataRequest_init_default           {"", _SensorType_MIN, 0}
#define SensorDataResponse_init_default          {0, false, ""}
#define ScriptAcceptedRequest_init_default       {""}
#define ScriptAcceptedResponse_init_default      {0, false, ""}
#define TokenRequest_init_zero                   {"", _SensorType_MIN, false, 0}
#define TokenResponse_init_zero                  {false, "", false, 0, 0, false, "", false, "", false, 0}
#define SensorDataRequest_init_zero              {"", _SensorType_MIN, 0}
#define SensorDataResponse_init_zero             {0, false, ""}
#define ScriptAcceptedRequest_init_zero          {""}
#define ScriptAcceptedResponse_init_zero         {0, false, ""}

/* Field tags (for use in manual encoding/decoding) */
#define TokenRequest_client_id_tag               1
#define TokenRequest_type_tag                    2
#define TokenRequest_need_script_tag             3
#define TokenResponse_access_token_tag           1
#define TokenResponse_expires_in_tag             2
#define TokenResponse_status_tag                 3
#define TokenResponse_status_message_tag         4
#define TokenResponse_script_tag                 5
#define TokenResponse_analog_rotation_per_kwh_tag 6
#define SensorDataRequest_access_token_tag       1
#define SensorDataRequest_type_tag               2
#define SensorDataRequest_value_tag              3
#define SensorDataResponse_status_tag            1
#define SensorDataResponse_status_message_tag    2
#define ScriptAcceptedRequest_access_token_tag   1
#define ScriptAcceptedResponse_status_tag        1
#define ScriptAcceptedResponse_status_message_tag 2

/* Struct field encoding specification for nanopb */
#define TokenRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   client_id,         1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   OPTIONAL, BOOL,     need_script,       3)
#define TokenRequest_CALLBACK NULL
#define TokenRequest_DEFAULT NULL

#define TokenResponse_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   access_token,      1) \
X(a, STATIC,   OPTIONAL, UINT32,   expires_in,        2) \
X(a, STATIC,   SINGULAR, UINT32,   status,            3) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    4) \
X(a, STATIC,   OPTIONAL, STRING,   script,            5) \
X(a, STATIC,   OPTIONAL, UINT32,   analog_rotation_per_kwh,   6)
#define TokenResponse_CALLBACK NULL
#define TokenResponse_DEFAULT NULL

#define SensorDataRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   access_token,      1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   SINGULAR, FLOAT,    value,             3)
#define SensorDataRequest_CALLBACK NULL
#define SensorDataRequest_DEFAULT NULL

#define SensorDataResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   status,            1) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    2)
#define SensorDataResponse_CALLBACK NULL
#define SensorDataResponse_DEFAULT NULL

#define ScriptAcceptedRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   access_token,      1)
#define ScriptAcceptedRequest_CALLBACK NULL
#define ScriptAcceptedRequest_DEFAULT NULL

#define ScriptAcceptedResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   status,            1) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    2)
#define ScriptAcceptedResponse_CALLBACK NULL
#define ScriptAcceptedResponse_DEFAULT NULL

extern const pb_msgdesc_t TokenRequest_msg;
extern const pb_msgdesc_t TokenResponse_msg;
extern const pb_msgdesc_t SensorDataRequest_msg;
extern const pb_msgdesc_t SensorDataResponse_msg;
extern const pb_msgdesc_t ScriptAcceptedRequest_msg;
extern const pb_msgdesc_t ScriptAcceptedResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TokenRequest_fields &TokenRequest_msg
#define TokenResponse_fields &TokenResponse_msg
#define SensorDataRequest_fields &SensorDataRequest_msg
#define SensorDataResponse_fields &SensorDataResponse_msg
#define ScriptAcceptedRequest_fields &ScriptAcceptedRequest_msg
#define ScriptAcceptedResponse_fields &ScriptAcceptedResponse_msg

/* Maximum encoded size of messages (where known) */
#define ENERGYLEAF_PB_H_MAX_SIZE                 TokenResponse_size
#define ScriptAcceptedRequest_size               46
#define ScriptAcceptedResponse_size              263
#define SensorDataRequest_size                   53
#define SensorDataResponse_size                  263
#define TokenRequest_size                        134
#define TokenResponse_size                       578

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
