/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_ENERGYLEAF_ENERGYLEAF_PB_H_INCLUDED
#define PB_ENERGYLEAF_ENERGYLEAF_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _energyleaf_SensorType {
    energyleaf_SensorType_ANALOG_ELECTRICITY = 0,
    energyleaf_SensorType_DIGITAL_ELECTRICITY = 1,
    energyleaf_SensorType_GAS = 2,
    energyleaf_SensorType_WATER = 3
} energyleaf_SensorType;

/* Struct definitions */
typedef struct _energyleaf_TokenRequest {
    char client_id[128];
    energyleaf_SensorType type;
    bool has_need_script;
    bool need_script;
} energyleaf_TokenRequest;

typedef struct _energyleaf_TokenResponse {
    bool has_access_token;
    char access_token[45];
    bool has_expires_in;
    uint32_t expires_in; /* in seconds (look documentation for correct value) */
    uint32_t status; /* In range of 200-299 correct, else bad */
    bool has_status_message;
    char status_message[255];
    bool has_script;
    char script[666];
    bool has_analog_rotation_per_kwh;
    uint32_t analog_rotation_per_kwh;
} energyleaf_TokenResponse;

typedef struct _energyleaf_SensorDataRequest {
    char access_token[45];
    energyleaf_SensorType type;
    double value_in; /* kWh total */
    bool has_value_current;
    double value_current; /* W currently */
    bool has_value_out;
    double value_out; /* kWh total out (pv) */
} energyleaf_SensorDataRequest;

typedef struct _energyleaf_SensorDataResponse {
    uint32_t status; /* In range of 200-299 correct, else bad */
    bool has_status_message;
    char status_message[255];
} energyleaf_SensorDataResponse;

typedef struct _energyleaf_ScriptAcceptedRequest {
    char access_token[45];
} energyleaf_ScriptAcceptedRequest;

typedef struct _energyleaf_ScriptAcceptedResponse {
    uint32_t status;
    bool has_status_message;
    char status_message[255];
} energyleaf_ScriptAcceptedResponse;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _energyleaf_SensorType_MIN energyleaf_SensorType_ANALOG_ELECTRICITY
#define _energyleaf_SensorType_MAX energyleaf_SensorType_WATER
#define _energyleaf_SensorType_ARRAYSIZE ((energyleaf_SensorType)(energyleaf_SensorType_WATER+1))

#define energyleaf_TokenRequest_type_ENUMTYPE energyleaf_SensorType


#define energyleaf_SensorDataRequest_type_ENUMTYPE energyleaf_SensorType





/* Initializer values for message structs */
#define energyleaf_TokenRequest_init_default     {"", _energyleaf_SensorType_MIN, false, 0}
#define energyleaf_TokenResponse_init_default    {false, "", false, 0, 0, false, "", false, "", false, 0}
#define energyleaf_SensorDataRequest_init_default {"", _energyleaf_SensorType_MIN, 0, false, 0, false, 0}
#define energyleaf_SensorDataResponse_init_default {0, false, ""}
#define energyleaf_ScriptAcceptedRequest_init_default {""}
#define energyleaf_ScriptAcceptedResponse_init_default {0, false, ""}
#define energyleaf_TokenRequest_init_zero        {"", _energyleaf_SensorType_MIN, false, 0}
#define energyleaf_TokenResponse_init_zero       {false, "", false, 0, 0, false, "", false, "", false, 0}
#define energyleaf_SensorDataRequest_init_zero   {"", _energyleaf_SensorType_MIN, 0, false, 0, false, 0}
#define energyleaf_SensorDataResponse_init_zero  {0, false, ""}
#define energyleaf_ScriptAcceptedRequest_init_zero {""}
#define energyleaf_ScriptAcceptedResponse_init_zero {0, false, ""}

/* Field tags (for use in manual encoding/decoding) */
#define energyleaf_TokenRequest_client_id_tag    1
#define energyleaf_TokenRequest_type_tag         2
#define energyleaf_TokenRequest_need_script_tag  3
#define energyleaf_TokenResponse_access_token_tag 1
#define energyleaf_TokenResponse_expires_in_tag  2
#define energyleaf_TokenResponse_status_tag      3
#define energyleaf_TokenResponse_status_message_tag 4
#define energyleaf_TokenResponse_script_tag      5
#define energyleaf_TokenResponse_analog_rotation_per_kwh_tag 6
#define energyleaf_SensorDataRequest_access_token_tag 1
#define energyleaf_SensorDataRequest_type_tag    2
#define energyleaf_SensorDataRequest_value_in_tag 3
#define energyleaf_SensorDataRequest_value_current_tag 4
#define energyleaf_SensorDataRequest_value_out_tag 5
#define energyleaf_SensorDataResponse_status_tag 1
#define energyleaf_SensorDataResponse_status_message_tag 2
#define energyleaf_ScriptAcceptedRequest_access_token_tag 1
#define energyleaf_ScriptAcceptedResponse_status_tag 1
#define energyleaf_ScriptAcceptedResponse_status_message_tag 2

/* Struct field encoding specification for nanopb */
#define energyleaf_TokenRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   client_id,         1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   OPTIONAL, BOOL,     need_script,       3)
#define energyleaf_TokenRequest_CALLBACK NULL
#define energyleaf_TokenRequest_DEFAULT NULL

#define energyleaf_TokenResponse_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, STRING,   access_token,      1) \
X(a, STATIC,   OPTIONAL, UINT32,   expires_in,        2) \
X(a, STATIC,   SINGULAR, UINT32,   status,            3) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    4) \
X(a, STATIC,   OPTIONAL, STRING,   script,            5) \
X(a, STATIC,   OPTIONAL, UINT32,   analog_rotation_per_kwh,   6)
#define energyleaf_TokenResponse_CALLBACK NULL
#define energyleaf_TokenResponse_DEFAULT NULL

#define energyleaf_SensorDataRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   access_token,      1) \
X(a, STATIC,   SINGULAR, UENUM,    type,              2) \
X(a, STATIC,   SINGULAR, DOUBLE,   value_in,          3) \
X(a, STATIC,   OPTIONAL, DOUBLE,   value_current,     4) \
X(a, STATIC,   OPTIONAL, DOUBLE,   value_out,         5)
#define energyleaf_SensorDataRequest_CALLBACK NULL
#define energyleaf_SensorDataRequest_DEFAULT NULL

#define energyleaf_SensorDataResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   status,            1) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    2)
#define energyleaf_SensorDataResponse_CALLBACK NULL
#define energyleaf_SensorDataResponse_DEFAULT NULL

#define energyleaf_ScriptAcceptedRequest_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   access_token,      1)
#define energyleaf_ScriptAcceptedRequest_CALLBACK NULL
#define energyleaf_ScriptAcceptedRequest_DEFAULT NULL

#define energyleaf_ScriptAcceptedResponse_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   status,            1) \
X(a, STATIC,   OPTIONAL, STRING,   status_message,    2)
#define energyleaf_ScriptAcceptedResponse_CALLBACK NULL
#define energyleaf_ScriptAcceptedResponse_DEFAULT NULL

extern const pb_msgdesc_t energyleaf_TokenRequest_msg;
extern const pb_msgdesc_t energyleaf_TokenResponse_msg;
extern const pb_msgdesc_t energyleaf_SensorDataRequest_msg;
extern const pb_msgdesc_t energyleaf_SensorDataResponse_msg;
extern const pb_msgdesc_t energyleaf_ScriptAcceptedRequest_msg;
extern const pb_msgdesc_t energyleaf_ScriptAcceptedResponse_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define energyleaf_TokenRequest_fields &energyleaf_TokenRequest_msg
#define energyleaf_TokenResponse_fields &energyleaf_TokenResponse_msg
#define energyleaf_SensorDataRequest_fields &energyleaf_SensorDataRequest_msg
#define energyleaf_SensorDataResponse_fields &energyleaf_SensorDataResponse_msg
#define energyleaf_ScriptAcceptedRequest_fields &energyleaf_ScriptAcceptedRequest_msg
#define energyleaf_ScriptAcceptedResponse_fields &energyleaf_ScriptAcceptedResponse_msg

/* Maximum encoded size of messages (where known) */
#define ENERGYLEAF_ENERGYLEAF_PB_H_MAX_SIZE      energyleaf_TokenResponse_size
#define energyleaf_ScriptAcceptedRequest_size    46
#define energyleaf_ScriptAcceptedResponse_size   263
#define energyleaf_SensorDataRequest_size        75
#define energyleaf_SensorDataResponse_size       263
#define energyleaf_TokenRequest_size             134
#define energyleaf_TokenResponse_size            989

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
