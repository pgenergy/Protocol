name: Build and Release

permissions:
  contents: write

on:
  push:
    tags:
      - v[0-9]+.*
      
jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: taiki-e/create-gh-release-action@v1
        with:
          token: ${{secrets.GITHUB_TOKEN}}

  build-c:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "27.x"

      - name: Install Nanopb
        run: | 
          pip install --upgrade protobuf grpcio-tools
          mkdir -p nanopb
          curl -L https://jpa.kapsi.fi/nanopb/download/nanopb-0.4.8-linux-x86.tar.gz | tar xz -C nanopb --strip-components=1

      - name: Make c release
        run: |
          cd build/c
          make

      - name: Upload c assets to release
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release upload $GITHUB_REF_NAME release/c_build.zip


  build-cpp:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "27.x"

      - name: Make cpp release
        run: |
          cd build/cpp
          make

      - name: Upload cpp assets to release
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release upload $GITHUB_REF_NAME release/cpp_build.zip

  build-java:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "27.x"

      - name: Make java release
        run: |
          cd build/java
          make

      - name: Upload java assets to release
        env: 
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          gh release upload $GITHUB_REF_NAME release/java_build.zip

  build-rust:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "27.x"

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Make rust release
        run: |
          cd build/rust
          mkdir -p proto
          cp ../../proto/Energyleaf.proto proto/
          cp ../../README.md README.md
          cp ../../LICENSE LICENSE
          cargo build --release
          cargo login ${{ secrets.CARGO_AUTH_TOKEN }}
          cargo publish --allow-dirty
        env:
          CARGO_AUTH_TOKEN: ${{ secrets.CARGO_AUTH_TOKEN }}

  build-node:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "27.x"

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: |
          cd build/node
          pnpm install

      - name: Make node release
        run: |
          cd build/node
          pnpm build
          pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_AUTH_TOKEN}}
